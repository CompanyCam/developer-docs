# Authentication

CompanyCam uses the OAuth 2.0 flow to authenticate users and generate access tokens for applications.

The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients. Since this is a redirection-based flow, the client must be capable of interacting with the resource owner's user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.

This request **requires** a *client id*, which you can get from your CompanyCam representative.


## Authorization Grant - Step 1

The first stage of generating an access token is to redirect the user to the CompanyCam authorization URI.

```shell
# Example URL
https://app.companycam.com/oauth/authorize?client_id={client_id}&redirect_uri={authorized_redirect_uri}&response_type=code&scope=read+write+destroy
```

### Request parameters

| Parameter                            | Description |
| ------------------------------------ | ------------- |
| **client_id** | Your unique client identifier provided to you by CompanyCam |
| **redirect_uri** | The URI to redirect the user to after they authorize your application. |
| **response_type** | This must be set to `code`. The `redirect_uri` provided above will include a `code` parameter used to obtain an access token in the next step. |

## Access Token - Step 2

After the user has authorized your application they will be redirected to the `redirect_uri` from step 1. The URI will contain a `code` parameter that will be used to obtain an `access_token` and `refresh_token`.

```shell
curl -X POST --data "client_id={client_id}&client_secret={client_secret}&code={code_from_uri}&grant_type=authorization_code&redirect_uri={authorized_redirect_uri}" "https://app.companycam.com/oauth/token"

# Example response

{
 "access_token": "de6780bc506a0446309bd9362820ba8aed28aa506c71eedbe1c5c4f9dd350e54",
 "token_type": "bearer",
 "expires_in": 7200,
 "refresh_token": "8257e65c97202ed1726cf9571600918f3bffb2544b26e00a61df9897668c33a1"
}
```

### Request parameters

| Parameter                            | Description |
| ------------------------------------ | ------------- |
| **client_id** | Your unique client identifier provided to you by CompanyCam |
| **client_secret** | Your secret key provided to you by CompanyCam |
| **code** | The value from the `code` parameter that was included when the user was redirected to your application. |
| **redirect_uri** | The URI to used above when you initially redirected the user to CompanyCam. |

## Authenticating API Calls

All subsequent calls to the CompanyCam API must include your application's secret key and the `access_token` obtained previously for the user.

> An example API call looks like:

```shell
# With shell, you can just pass the correct header with each request
curl "https://api.companycam.com/v2/"
  -H "Authorization: Bearer <ACCESS_TOKEN>"
  -H "X-CompanyCam-Secret: <SECRET_KEY>"
```

You can optionally pass the user's email address performing the action in your app in a header that looks like the following:
`X-CompanyCam-User: <USER_EMAIL>`

If the email address is not provided or the user cannot be found it will use the email address of the user that configured the integration.
